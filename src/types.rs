use libc;
use crate::{__sigset_t, _FEATURE, cf_def, cpm_def, ctm_def, entity, mention, node_para_manager, sentence, tcf_def, tnode_b, tnode_t};
use crate::structs::{__jmp_buf_tag, _BIN, _CELL, _check, _CKY, _CLASS, _dtcond, _IO_FILE, _RuleVector, _TYPE, case_component, CDB_FILE, cf_list, cpm_cache, ellipsis_candidate, ellipsis_cmm_list, ellipsis_component, ellipsis_features, ellipsis_list, ellipsis_svm_features, ellipsis_twin_cand_svm_features, entity_list, entity_manager, mention_manager, ne_cache, predicate_anaphora_list, sm_list, thesaurus, tnode_p, cf_frame_def, z_stream_s, NE_mgr};

pub type BNST_DATA = tnode_b;
pub type Para_M_ptr = *mut node_para_manager;
pub type PARA_DATA = tnode_p;
pub type Treeptr_B = *mut tnode_b;
pub type SENTENCE_DATA = sentence;
pub type CF_PRED_MGR = cpm_def;
pub type CHECK_DATA = _check;
pub type PARA_MANAGER = node_para_manager;
pub type CLASS = _CLASS;
pub type TYPE = _TYPE;
pub type FEATUREptr = *mut _FEATURE;
pub type FEATURE = _FEATURE;
pub type _IO_lock_t = ();
pub type FILE = _IO_FILE;
pub type time_t = __time_t;
pub type DBM_FILE = *mut CDB_FILE;
pub type ENTITY_MGR = entity_manager;
pub type ENTITY = entity;
pub type CF_ptr = *mut cf_def;
pub type CPM_ptr = *mut cpm_def;
pub type MENTION = mention;
pub type MENTION_MGR = mention_manager;
pub type TAG_DATA = tnode_t;
pub type CASE_FRAME = cf_def;
pub type RuleVector = _RuleVector;
pub type VerboseType = libc::c_uint;
pub type sa_family_t = libc::c_ushort;
pub type jmp_buf = [__jmp_buf_tag; 1];
pub type socklen_t = __socklen_t;
pub type __socket_type = libc::c_uint;
pub type uint16_t = __uint16_t;
pub type uint32_t = __uint32_t;
pub type in_addr_t = uint32_t;
pub type sigset_t = __sigset_t;
pub type __sighandler_t = Option<unsafe extern "C" fn(_: libc::c_int) -> ()>;
pub type __jmp_buf = [libc::c_long; 8];
pub type gid_t = __gid_t;
pub type __uint16_t = libc::c_ushort;
pub type __uint32_t = libc::c_uint;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __mode_t = libc::c_uint;
pub type __pid_t = libc::c_int;
pub type __socklen_t = libc::c_uint;
pub type in_port_t = uint16_t;
pub type size_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type THESAURUS_FILE = thesaurus;
pub type BIN = _BIN;
pub type CELL = _CELL;
pub type CFLIST = cf_list;
pub type __dev_t = libc::c_ulong;
pub type __ino_t = libc::c_ulong;
pub type __nlink_t = libc::c_ulong;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type ELLIPSIS_MGR = ellipsis_list;
pub type ELLIPSIS_CMM = ellipsis_cmm_list;
pub type ELLIPSIS_COMPONENT = ellipsis_component;
pub type CKYptr = *mut _CKY;
pub type CKY = _CKY;
pub type __compar_fn_t = Option<unsafe extern "C" fn(_: *const libc::c_void, _: *const libc::c_void) -> libc::c_int>;
pub type SMLIST = sm_list;
pub type DTCOND = _dtcond;
pub type Byte = libc::c_uchar;
pub type uInt = libc::c_uint;
pub type uLong = libc::c_ulong;
pub type Bytef = Byte;
pub type voidpf = *mut libc::c_void;
pub type alloc_func = Option<unsafe extern "C" fn(_: voidpf, _: uInt, _: uInt) -> voidpf>;
pub type free_func = Option<unsafe extern "C" fn(_: voidpf, _: voidpf) -> ()>;
pub type z_stream = z_stream_s;
pub type z_streamp = *mut z_stream;
pub type PALIST = predicate_anaphora_list;
pub type CASE_COMPONENT = case_component;
pub type E_FEATURES = ellipsis_features;
pub type E_SVM_FEATURES = ellipsis_svm_features;
pub type E_CANDIDATE = ellipsis_candidate;
pub type ENTITY_LIST = entity_list;
pub type E_TWIN_CAND_SVM_FEATURES = ellipsis_twin_cand_svm_features;
pub type CPM_CACHE = cpm_cache;
pub type NE_CACHE = ne_cache;
pub type CF_FRAME = cf_frame_def;
pub type CF_TAG_MGR = ctm_def;
pub type TAG_CASE_FRAME = tcf_def;
pub type NE_MANAGER = NE_mgr;